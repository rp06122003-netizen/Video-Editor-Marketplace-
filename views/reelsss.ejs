<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Feed</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

    


    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .rl-container *{
            color: #fff;
        }


        .rl-container {
    display: flex;
    height: 90vh; /* Ensure the container takes full viewport height */
   
    }

.activeliked{
    background-color: red;
}

.rl-video-feed {
    flex: 1;
    height: 100%; /* Set the height to 100% of the parent (.rl-container) */
    overflow: hidden;
    position: relative;
}


        .rl-video-container {
            height: 100%;
            position: relative;
            scroll-snap-type: y mandatory;
            overflow-y: scroll;
            scrollbar-width: none;
            width: fit-content;
            margin: 0 auto;
        }

        .rl-video-item {
            height: 100%;
            width: fit-content;
            scroll-snap-align: start;
            position: relative;
            background: #1a1a1a;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .rl-video {
            width: 340px;
            height: 100%;
            object-fit: cover;
        }

        .rl-video-info {
            position: absolute;
            bottom: 20px;
            z-index: 2;
            width: 90%;
            display: flex;
        }
.rl-filter{
    position: absolute;
    top: 20px;
    z-index: 2;
    width: 90%;
    display: flex;
    
    
}

        .rl-viddesc {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: end;
        }

        .rl-action-buttons-container {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .rl-action-buttons-container > * {
            border: 1px solid white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .rl-action-buttons-container *:hover {
            /* color: black; */
            background-color: #ee373e;
            cursor: pointer;
        }

        .rl-video-info h3 {
            font-size: 1.2rem;
            margin-bottom: 8px;
        }

        .rl-video-info p {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        /* Sidebar Styles */
        .rl-sidebar {
            width: 200px;
            background: #1a1a1a;
            overflow-y: auto;
        }

        .rl-filter-button {
            display: flex;
            align-items: center;
            width: 100%;
            padding: 12px 16px;
            margin-bottom: 8px;
            background: #2a2a2a;
            border: none;
            border-radius: 8px;
            color: #fff;
            cursor: pointer;
            transition: background 0.2s;
        }

        .rl-filter-button:hover {
            background: #333;
        }

        .rl-filter-button.active {
            background: #e74c3c;
        }

        .rl-filter-icon {
            width: 32px;
            height: 32px;
            background: #e74c3c;
            border-radius: 50%;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .rl-filter-text {
            font-size: 0.95rem;
            font-weight: 500;
        }

        @media (max-width: 768px){
            .rl-sidebar {
                display: none;
            }
        }
    </style>

<style>

    .filter-fab {
        position: absolute;
        top: 8px;
        right: 8px;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: #ff4757;
        color: #fff;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        z-index: 100;
        transition: all 0.3s ease;

        pointer-events: auto;
    }

    .filter-fab:hover {
        background-color: #ff6b81;
    }
    
    .filter-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: fit-content;
        background-color: rgba(0,0,0,0.8);
        z-index: 90;
        display: flex;
        display: none;
        flex-direction: column;
        padding: 80px 20px 20px;
        overflow-y: auto;
        /* transition: all 0.3s ease;
        transform: translateY(-100%); */
    }
    
    .filter-overlay.active {
        /* transform: translateY(0); */
        display: flex;
    }
    
    .filter-section {
        margin-bottom: 24px;
    }
    
    .filter-label {
        font-size: 14px;
        color: #ccc;
        margin-bottom: 12px;
        display: block;
    }
    
    .filter-chips {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }
    
    .filter-chip {
        padding: 8px 16px;
        background-color: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 20px;
        font-size: 14px;
        color: #fff;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .filter-chip:hover, .filter-chip.active {
        background-color: #ff4757;
        border-color: #ff4757;
    }
    
    .filter-chip .count {
        font-size: 12px;
        opacity: 0.7;
    }
    
    
    </style>
</head>
<body>
    <div class="rl-container">
        <!-- Video Feed -->
        <div class="rl-video-feed">
            <div class="rl-video-container" id="rl-videoContainer">
                <!-- Videos will be dynamically inserted here -->
            </div>
        </div>

    </div>


<script>

document.body.addEventListener("click", (event) => {
    if (event.target.closest('.filter-fab')) { 
        console.log("clicked");
        document.querySelectorAll('.filter-overlay').forEach(filter => {
            filter.classList.toggle('active');
        });
        // openFilter(); // Call your function
    }
});


document.body.addEventListener("click", (event) => {
    if (event.target.classList.contains("filter-chip")) {
        const category=event.target.textContent;
        console.log("cat: ", category)
        filterVideos(category);

        document.querySelectorAll('.filter-overlay').forEach(filter => {
            filter.classList.toggle('active');
        });   //iff only one type of filter is there
    }
});



    // function openFilter(){
    //     document.querySelectorAll('.filter-overlay').forEach(filter => {
    //         filter.classList.toggle('active');
    //     });
    // }



        // Sample video data
        async function getvideos() {
            const response = await fetch('/api/videos'); // Fetch videos from backend
            const videos = await response.json(); // Parse JSON response
            // console.log(videos)
            return videos
            
        }

        async function getlikes() {
            const response = await fetch('/api/like'); // Fetch videos from backend
            const likes = await response.json(); // Parse JSON response
            console.log("likes: ",likes)
            return likes.map(likedVideo => likedVideo.videoId._id); //.populate ki wjh se
        }
        
// Use an async function to handle the result
async function loadVideos() {
    const videos = await getvideos(); // Wait for the promise to resolve
    const likes = await getlikes(); // Wait for the promise to resolve
    // console.log("likkess: ", likes)

    // console.log("hvid0", videos[0]._id)
    // console.log("likes arr: ", likes)
    // console.log("hiiiiiiiillll: ",likes.includes(videos[0]._id))

    const vidpp = videos.map(video => ({
        editorId:video.owner,
        url: video.videoUrl, // Assuming the API returns `url` field
        title: video.title, // Assuming the API returns `title` field
        description: video.description, // Assuming the API returns `description` field
        category: video.category, // Assuming the API returns `category` field
        price: video.price, // Assuming the API returns `price` field
        _id:video._id,
        isLiked:likes.includes(video._id)
    }));

    return vidpp; // Use this as needed
}

        const rlVideoContainer = document.getElementById('rl-videoContainer');
        let currentFilter = 'all';
        let videos=[];

        // Function to create video elements
        function createVideoElement(video) {
            const videoItem = document.createElement('div');
            videoItem.className = 'rl-video-item';
            videoItem.innerHTML = `
                <video class="rl-video" loop muted playsinline>
                    <source id="${video._id}" src="${video.url}" type="video/mp4">
                </video>
                <div class='rl-filter'>
                    <button class="filter-fab" id="filterFab">
                        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z"/>
                        </svg>
                    </button>

                    <div class="filter-overlay" id="filterOverlay">
                        <div class="filter-section">
                            <span class="filter-label">Categories</span>
                            <div class="filter-chips">
                                <button class="filter-chip">all</button>
                                <button class="filter-chip">wedding</button>
                                <button class="filter-chip">commercial</button>
                                <button class="filter-chip">music</button>
                                <button class="filter-chip">corporate</button>
                                <button class="filter-chip">social</button>
                                <button class="filter-chip">others</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="rl-video-info">
                    <div class="rl-viddesc">
                        <h3 id='vidtitle'>${video.title}</h3>
                        <p id='viddesc'>${video.description}</p>
                        <p id='${video.editorId}' class='video-owner'>${video.editorId}</p>
                        <p style="font-size:20px; font-style: italic;" id='vidprice'>$${video.price}</p>
                    </div>
                    <div class="rl-vidoptions">
                        <div class="rl-action-buttons-container">
                            <span class="rl-heart-icon ${video.isLiked? "activeliked": ""}" onclick="toggleHeart(event)" }">${video.isLiked ? '❤' : '♡'}</span>
                            <a class="rl-cart-icon" id="pay-btn">
                                <i class="fas fa-shopping-cart" ></i>
                            </a>
                            <span class="rl-share-icon">
                                <i class="fas fa-share-alt" ></i>
                            </span>
                        </div>  
                    </div>
                </div>
            `;
            return videoItem;
        }

        function toggleHeart(event) {
            const hearticon = event.target;
            if (hearticon.innerHTML == '❤') {
                hearticon.innerHTML = '♡'
            } else {
                hearticon.innerHTML = '❤'

            }
            document.querySelector('.rl-heart-icon').classList.toggle('activeliked');
            // console.log(document.querySelector('.rl-heart-icon').innerHTML)
            sendLike(document.querySelector('.rl-heart-icon').innerHTML=='❤' ? 'unliked' : 'liked');
        }

        async function sendLike(curricon){
            document.body.addEventListener("click", async function (event) {
                let closestVid=event.target.closest('.rl-video-item')
            const vidid=closestVid.querySelector('.rl-video source').id;
            console.log("vidurl vidlike", vidid)
            
            const response = await fetch('/api/like', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({vidid, curricon})
            });
            const data = await response.json();
            console.log("sent like data", data);
        });
        }

        // Function to filter and display videos
        function filterVideos(category) {
            console.log("fv", category)

            rlVideoContainer.innerHTML = '';
            const filteredVideos = category === 'all' 
                ? videos 
                : videos.filter(video => video.category === category);
            
            if (filteredVideos.length === 0) {
                // Display "No videos found" message
                console.log("no videos found")
                console.log(rlVideoContainer.innerHTML)
                const noVideosMessage = document.createElement('div');
                noVideosMessage.style.width = '340px'
                noVideosMessage.style.height = '90vh'
                noVideosMessage.innerHTML=`<div class='rl-filter'>
                    <button class="filter-fab" id="filterFab">
                        <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z"/>
                        </svg>
                    </button>

                    <div class="filter-overlay" id="filterOverlay">
                        <div class="filter-section">
                            <span class="filter-label">Categories</span>
                            <div class="filter-chips">
                                <button class="filter-chip">all</button>
                                <button class="filter-chip">wedding</button>
                                <button class="filter-chip">commercial</button>
                                <button class="filter-chip">music</button>
                                <button class="filter-chip">corporate</button>
                                <button class="filter-chip">social</button>
                                <button class="filter-chip">others</button>
                            </div>
                        </div>
                    </div>
                </div>
                <h2 style="margin-top: 100px;">No videos found!</h2>`
                // // noVideosMessage.textContent = 'No videos found!';
                // noVideosMessage.style.border='1px solid black'
                noVideosMessage.style.textAlign = 'center'; // Optional styling
                noVideosMessage.classList.add('rl-video-item');
                rlVideoContainer.appendChild(noVideosMessage);
                console.log(rlVideoContainer.innerHTML)
            } else {
                filteredVideos.forEach(video => {
                    rlVideoContainer.appendChild(createVideoElement(video));
                });

                    // Initialize video playing logic
                initializeVideos();
            }
            document.querySelectorAll(".filter-chip").forEach(btn => {
                    console.log("removing active from all..")
                    btn.classList.remove("active");
                });
                document.querySelectorAll(".filter-chip").forEach(btn => {
                    if (btn.textContent.trim().toLowerCase() === category.toLowerCase()) {
                        console.log("catlow",btn.textContent.trim().toLowerCase())
                        btn.classList.add("active");
                    }
                });
        }

        // Function to handle intersection observer for videos
        function initializeVideos() {
            const videoElements = document.querySelectorAll('.rl-video');
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    const video = entry.target;
                    if (entry.isIntersecting) {
                        video.play();
                    } else {
                        video.pause();
                        video.currentTime = 0;
                    }
                });
            }, { threshold: 0.7 });

            videoElements.forEach(video => observer.observe(video));
        }

        // Add click handlers for filter buttons
        document.querySelectorAll('.rl-filter-button').forEach(button => {
            button.addEventListener('click', () => {
                // Update active state
                document.querySelector('.rl-filter-button.active').classList.remove('active');
                button.classList.add('active');

                // Filter videos
                const category = button.dataset.category;
                currentFilter = category;
                filterVideos(category);
            });
        });

        // Initial load
        async function initialize() {
        videos = await loadVideos(); // Fetch videos from the database
        console.log("vidpp: ", videos)
        filterVideos('all'); // Display all videos initially
    }

    initialize(); // Fetch and render videos on page load

    document.addEventListener("DOMContentLoaded", function () {
        // prod_name, amount, prod_desc
        document.body.addEventListener("click", async function (event) {
            let viddpp=event.target.closest('.rl-video-item')
            const videoId=viddpp.querySelector('.rl-video source').id;
            const vidamt=viddpp.querySelector('#vidprice').textContent.slice(1);

            if (event.target.closest("#pay-btn")) { 
                window.location.href = `/checkout?videoId=${videoId}&amt=${vidamt}`;
                
            }
        });
    });


</script>
</body>
</html>
